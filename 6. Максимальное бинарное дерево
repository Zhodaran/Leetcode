/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func constructMaximumBinaryTree(nums []int) *TreeNode {
 if len(nums) == 0 {
		return nil
	}

	// Находим индекс максимального элемента
	maxIndex := 0
	for i := 1; i < len(nums); i++ {
		if nums[i] > nums[maxIndex] {
			maxIndex = i
		}
	}

	// Создаем корневой узел с максимальным значением
	root := &TreeNode{Val: nums[maxIndex]}
	// Рекурсивно строим левое и правое поддеревья
	root.Left = constructMaximumBinaryTree(nums[:maxIndex]) // Левое поддерево
	root.Right = constructMaximumBinaryTree(nums[maxIndex+1:]) // Правое поддерево

	return root
}

// Функция для вывода дерева в порядке обхода
func printTree(node *TreeNode) {
	if node == nil {
		return
	}
	fmt.Print(node.Val, " ")
	printTree(node.Left)
	printTree(node.Right)
}
